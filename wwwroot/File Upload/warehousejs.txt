const { useState, useEffect, useRef } = React;
const { Table, Button, Input, Space, Col, Card, message, Select, Form, Row, AutoComplete, DatePicker, Upload, Switch, Spin, Modal, InputNumber, Divider } = antd;
const { SearchOutlined, DownOutlined, SaveOutlined, EditOutlined, DeleteOutlined, PlusOutlined, PushpinOutlined, PaperClipOutlined, MailOutlined, FileTextOutlined, CheckCircleTwoTone, UploadOutlined, FileOutlined } = icons;
function Warehouse() {
    const { Option } = Select;
    const [form] = Form.useForm();
    const [warehouseData, setWarehouseData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [loading6, setLoading6] = useState(true);
    const [selectedRecord, setSelectedRecord] = useState(null);
    const [isEditMode, setIsEditMode] = useState(false);
    const [isCancelHovered, setIsCancelHovered] = useState(false);// Add state for edit mode
    const [searchTerm, setSearchTerm] = useState(''); // State to hold the search term
    const [filteredWarehouseData, setFilteredWarehouseData] = useState([]);
    const [isEnabled, setIsEnabled] = useState(false);
    const [countries, setCountries] = useState([]);
    const [selectedCountry, setSelectedCountry] = useState('');
    const [states, setStates] = useState([]);
    const [loading2, setLoading2] = useState(false);
    const [loading1, setLoading1] = useState(false);
    // State to hold filtered data
    // Function to handle search input change
    const handleSearch = (value) => {
        if (warehouseData && warehouseData.length > 0) {
            const filteredData = warehouseData.filter((item) =>
                (item.warehousename && item.warehousename.toLowerCase().includes(value.toLowerCase())) ||
                (item.phone && item.phone.toLowerCase().includes(value.toLowerCase())) ||
                (item.email && item.email.toLowerCase().includes(value.toLowerCase()))
            );
            setSearchTerm(value); // Update search term state
            setFilteredWarehouseData(filteredData); // Update filtered data state
        }
    };
    useEffect(() => {
        // Fetch warehouse data when component mounts
        handleWarehouseDataFetch();
        fetchCountries();
    }, []);

    const fetchCountries = () => {
        setLoading2(true); // Set loading to true before the API call
        $.ajax({
            url: "/Base/LoadOrigin", // Adjust URL as per your API endpoint
            method: 'GET',
            dataType: 'json',
            success: function (data) {
                console.log('API Response:', data); // Log the response for debugging
                if (Array.isArray(data)) {
                    const countryNames = data.map(item => item.country1); // Extract country names from API response
                    setCountries(countryNames); // Update state with country names
                } else {
                    console.error('Unexpected data format:', data);
                }
            },
            error: function (error) {
                console.error('Error fetching countries:', error);
            },
            complete: function () {
                setLoading2(false); // Set loading to false after the API call is complete
            }
        });
    };
    // Function to fetch states by country
 
    // Function to fetch states by country
    // Function to fetch states by country
    const loadStatesByCountry = async (country) => {
        try {
            setLoading1(true);
            const response = await $.ajax({
                url: `Base/LoadStatesByCountry?cText=${country}`,
                type: "GET",
            });
            const sortedStates = response.sort((a, b) => a.statename.localeCompare(b.statename));
            setStates(sortedStates);
        } catch (err) {
            message.error(`Error: ${err.message}`);
        } finally {
            setLoading1(false);
        }
    };

    // Call this function when a country is selected
    const handleCountryChange = async (value) => {
        setSelectedCountry(value);
        setStates([]);
        form.setFieldsValue({ state: null });
        // Check if states array is already populated
        if (states.length === 0) {
            setLoading1(true); // Set loading state to true while fetching states

            try {
                await loadStatesByCountry(value);

            } catch (err) {
                message.error(`Error: ${err.message}`);
            } finally {
                setLoading1(false); // Set loading state to false after fetching states
            }
        }
    };

    // Render function for state dropdown or input field based on states array
    const renderStateField = () => {
        if (states.length > 0) {
            return (
                <Select
                    placeholder="Select state"
                    style={{ width: '258px' }}
                    loading={loading1}
                >
                    {states.map(state => (
                        <Option key={state.statecode} value={state.statename}>
                            {state.statename}
                        </Option>
                    ))}
                </Select>
            );
        } else {
            return (
                <Input placeholder="Enter state" />
            );
        }
    };


    // Example usage in the Select component
    const pagination = {
        defaultPageSize: 10,
        showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} Items`
    }
    const handleWarehouseDataFetch = () => {
        setLoading(true); // Set loading state to true while fetching
        $.ajax({
            url: 'Warehouse/GetWarehouselist',
            method: 'GET',
            dataType: 'json',
            success: function (data) {
                console.log(data.data);
                if (data.responsecode === 200) {
                    setWarehouseData(data.data);
                } else {
                    console.error('Unexpected data format:', data);
                }
                setLoading(false); // Set loading state to false after fetching
            },
            error: function (error) {
                console.error('Error fetching warehouse data:', error);
                setLoading(false); // Set loading state to false on error
            }
        });
    };
    const handleSubmit = async () => {
        try {
            setLoading6(true);
            const values = await form.validateFields();
            console.log('values', values);
            const whmodel = {
                warehousename: values.warehousename,
                Address: values.address,
                City: values.city,
                State: values.state,
                Postalcode: values.postalcode,
                Phone: values.phone,
                Email: values.email,
                Contactname: values.Contactname, 
                country: values.country,
                DefaultPallet: values.defaultPallet ||null,
                DefaultLocation: values.defaultLocation || null,
                IsActive: isEnabled, 
                whid: selectedRecord ? selectedRecord.uniqueid : null // Use the ID if editing an existing record
            };
            console.log('whmodel', whmodel);
            const url = "/Warehouse/Createandupdatewarehouses/"; // Ensure this endpoint is for updating
            await $.ajax({
                type: "POST",
                url: url,
                data: { _whmodel: whmodel },
                success: function (data) {
                    console.log('data', data);
                    setLoading6(false);
                    if (data.responsecode === 200) {
                        swal("Success", isEditMode ? "Warehouse Updated successfully" : "New Warehouse Added successfully", "success");
                        form.resetFields('');
                        setStates([]);
                        setCountries([]);
                        handleWarehouseDataFetch();
                        setIsEditMode(false); // Reset edit mode
                        setSelectedRecord(null); // Reset selected record
                    }
                    else {
                    // Show the message from the server response
                    swal("Error", data.responsemessage);
                }
                },
                error: function (result) {
                    setLoading6(false);
                    $("#start-loading").loading("stop");
                    swal({
                        title: "Server Error",
                        text: result.responseText, // Use result.responseText for more detailed error info
                    });
                }
            });
        } catch (error) {
            setLoading6(false);
            console.error('Validation failed:', error);
            swal("Error", "Validation failed. Please check your input.", "error");
        }
    };
    const handleCancel = () => {
        form.resetFields();
        setIsEditMode(false);
    };
    const handleEdit = (record) => {
        console.log('Edit record:', record);
        setSelectedRecord(record);
        form.setFieldsValue(record);
        if (record.country) {
            handleCountryChange(record.country); // Populate states based on selected country
        }
        setIsEditMode(true);
    };
    const columns = [
        {
            title: 'Warehouse Name',
            dataIndex: 'warehousename',
            key: 'Warehouse Name',
        },
        {
            title: 'Phone',
            dataIndex: 'phone',
            key: 'Phone',
        },
        {
            title: 'Email',
            dataIndex: 'email',
            key: 'Email',
        },
        {
            title: 'Pallet',
            dataIndex: 'defaultPallet',
            key: 'Pallet',
        },
        {
            title: 'Location',
            dataIndex: 'defaultLocation',
            key: 'Location',
        },

        {
            title: 'Action',
            key: 'action',
            align:'center',
            render: (text, record) => (
                <EditOutlined onClick={() => handleEdit(record)} style={{ color: '#1890ff', fontSize: '16px' }} />
            ),
        },
    ];
    const handleCancelMouseEnter = () => setIsCancelHovered(true);
    const handleCancelMouseLeave = () => setIsCancelHovered(false);

    return (
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
            <div style={{ flex: 1, padding: '16px', borderRadius: '8px', marginRight: '16px' }}>
                <Form
                    name="basic"
                    form={form}
                    initialValues={{ remember: true }}
                >
                    <div style={{ display: 'flex', justifyContent: "space-between", alignItems: 'center', marginBottom: '20px' }}>
                        <h2 style={{ color: '#9370DB', fontWeight: '500', fontSize: '18px' }}>
                            <i className="ti-user me-15"></i>Warehouse Management
                        </h2>
                        <Switch
                            checked={isEnabled}
                            onChange={setIsEnabled}
                            checkedChildren="ON"
                            unCheckedChildren="OFF"
                            defaultChecked={false} // Initial state of the switch
                        />
                    </div>
                    <Divider />
                    <div>
                        <Row gutter={[30, 8]} style={{ paddingLeft: 0 }}>
                            <Col span={8}>
                                <Form.Item
                                    label="Warehouse Name"
                                    name="warehousename"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}
                                    rules={[{ required: true, message: 'Please enter warehouse name!' }]}
                                    style={{ marginBottom: '5px' }}
                                >
                                    <Input placeholder="Enter warehouse name" />
                                </Form.Item>
                            </Col>
                            <Col span={8}>
                                <Form.Item
                                    label="Contact Name"
                                    name="Contactname"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}
                                    rules={[{ required: true, message: 'Please enter contactname!' }]}
                                    style={{ marginBottom: '5px' }}
                                >
                                    <Input placeholder="Enter contactname" />
                                </Form.Item>
                            </Col>
                        </Row>
                    </div>
                    <Divider />
                    <div>
                        <Row gutter={[30, 8]} style={{ paddingLeft: 0 }}>
                            <Col span={8}>
                                <Form.Item
                                    label="Address"
                                    name="address"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}
                                    rules={[{ required: true, message: 'Please enter address!' }]}
                                    style={{ marginBottom: '5px' }}
                                >
                                    <Input placeholder="Enter address" />
                                </Form.Item>
                            </Col>
                            <Col span={8}>
                                <Form.Item
                                    label="City"
                                    name="city"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}
                                    rules={[{ required: true, message: 'Please enter city!' }]}
                                    style={{ marginBottom: '5px' }}
                                >
                                    <Input placeholder="Enter City" />
                                </Form.Item>
                            </Col>
                            <Col span={8}>
                                <Form.Item
                                    label="Country"
                                    name="country"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}
                                    rules={[{ required: true, message: 'please select country!' }]}
                                    style={{ marginBottom: '5px' }}
                                >
                                    <Select
                                        placeholder="select country"
                                        style={{ width: '258px' }}
                                        onChange={handleCountryChange}                                       
                                        loading={loading2}
                                    >
                                          {countries.map(country1 => (
                                <Option key={country1} value={country1}>{country1}</Option>
                            ))}
                                    </Select>
                                </Form.Item>
                            </Col>
                            <Col span={8}>
                                <Form.Item
                                    label="State"
                                    name="state"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}
                                    rules={[{ required: true, message: 'Please enter state!' }]}
                                    style={{ marginBottom: '5px' }}
                                >
                                    {renderStateField()}
                                </Form.Item>
                            </Col>
                           
                            <Col span={8}>
                                <Form.Item
                                    label="Postal Code"
                                    name="postalcode"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}
                                    rules={[{ required: true, message: 'Please enter postal code!' }]}
                                    style={{ marginBottom: '5px' }}
                                >
                                    <Input placeholder="Enter postal code"/>
                                </Form.Item>
                            </Col>
                            <Col span={8}>
                                <Form.Item
                                    label="Phone"
                                    name="phone"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}
                                    rules={[{ required: true, message: 'Please enter phone number!' }]}
                                    style={{ marginBottom: '5px' }}
                                >
                                    <Input placeholder="Enter phone number" />
                                </Form.Item>
                            </Col>
                            <Col span={8}>
                                <Form.Item
                                    label="Email"
                                    name="email"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}
                                    rules={[{ required: true, message: 'Please enter email!' }, { type: 'email', message: 'Please enter a valid email!' }]}
                                    style={{ marginBottom: '5px' }}
                                >
                                    <Input placeholder="Enter email" />
                                </Form.Item>
                            </Col>
                        </Row>
                    </div>
                    <Divider />
                    <div>
                        <Row gutter={[30, 8]} style={{ paddingLeft: 0 }}>
                            <Col span={8}>
                                <Form.Item
                                    label="Default Pallet"
                                    name="defaultPallet"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}                                
                                    style={{ marginBottom: '5px' }}
                                >
                                    <Input placeholder="Enter pallet" />
                                </Form.Item>
                            </Col>
                            <Col span={8}>
                                <Form.Item
                                    label="Default Warehouse Location"
                                    name="defaultLocation"
                                    labelCol={{ span: 24, style: { fontWeight: '500', marginBottom: '-5px' } }}
                                    wrapperCol={{ span: 24, style: { paddingLeft: 0 } }}
                                    rules={[{ required: true, message: 'Please enter Location!' }]}
                                    style={{ marginBottom: '5px' }}
                                >
                                    <Input placeholder="Enter location" />
                                </Form.Item>
                            </Col>
                        </Row>
                    </div>
                    <div style={{ alignItems: 'center', marginTop: 20 }}>
                        <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
                            <Button type="primary" htmlType="submit" onClick={handleSubmit}>
                                {isEditMode ? 'Update' : 'Add'}
                            </Button>
                            <Button
                                style={{
                                    marginLeft: 10,
                                    backgroundColor: isCancelHovered ? '#FFA000' : '#FFC107',
                                    borderColor: isCancelHovered ? '#FFA000' : '#FFC107',
                                    color: 'white',
                                    display: 'flex',
                                    alignItems: 'center',
                                }}
                                onMouseEnter={handleCancelMouseEnter}
                                onMouseLeave={handleCancelMouseLeave}
                                onClick={handleCancel}
                            >
                                Cancel
                            </Button>
                        </div>
                    </div>
                </Form>
            </div>
            <div style={{ flex: 1, padding: '16px', borderRadius: '8px', marginBottom: '20px' }}>
                <div>
                    <h2 style={{ color: '#9370DB', fontWeight: '500', fontSize: '18px' }}>Warehouses</h2>
                </div>
                <Divider />
                <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '8px' }}>
                    <div>
                        <AutoComplete
                            style={{
                                width: "12em",
                                paddingRight: "6px",
                                paddingBottom: "3px"
                            }}
                            placeholder="Search by..."
                            onSearch={handleSearch}
                        />
                    </div>
                </div>
                <Table
                    columns={columns}
                    dataSource={searchTerm ? filteredWarehouseData : warehouseData}
                    loading={loading}
                    rowKey="id" 
                    pagination={pagination}
                    bordered
                    size="small"
                />
            </div>
        </div>
    );

};
ReactDOM.render(<Warehouse />, document.getElementById("Transfer_React"));